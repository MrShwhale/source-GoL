exec life/output.cfg
exec life/cells.cfg

//Test for a cell around p, and update the update method
	alias "cycle_0" "puk; alias cycle cycle_1"
	alias "cycle_1" "alias cycle cycle_2"
	alias "cycle_2" "pus; alias cycle cycle_3"
	alias "cycle_3" "pul; alias cycle puk"

	alias "test_p" "cycle_0; alias true cycle; alias "false" "nothing"; psr"

//Calls the update method for every square
	alias "updateAll" "update_0"

	alias "update_0" "0_0u; 0_1u; 0_2u; 0_3u; 0_4u; 0_5u; 0_6u; 0_7u; 0_8u; 0_9u; 0_10u; 0_11u; 0_12u; airgap; update_1"
	alias "update_1" "1_0u; 1_1u; 1_2u; 1_3u; 1_4u; 1_5u; 1_6u; 1_7u; 1_8u; 1_9u; 1_10u; 1_11u; 1_12u; airgap; update_2"
	alias "update_2" "2_0u; 2_1u; 2_2u; 2_3u; 2_4u; 2_5u; 2_6u; 2_7u; 2_8u; 2_9u; 2_10u; 2_11u; 2_12u; airgap; update_3"
	alias "update_3" "3_0u; 3_1u; 3_2u; 3_3u; 3_4u; 3_5u; 3_6u; 3_7u; 3_8u; 3_9u; 3_10u; 3_11u; 3_12u; airgap; update_4"
	alias "update_4" "4_0u; 4_1u; 4_2u; 4_3u; 4_4u; 4_5u; 4_6u; 4_7u; 4_8u; 4_9u; 4_10u; 4_11u; 4_12u; airgap; update_5"
	alias "update_5" "5_0u; 5_1u; 5_2u; 5_3u; 5_4u; 5_5u; 5_6u; 5_7u; 5_8u; 5_9u; 5_10u; 5_11u; 5_12u; airgap; update_6"
	alias "update_6" "6_0u; 6_1u; 6_2u; 6_3u; 6_4u; 6_5u; 6_6u; 6_7u; 6_8u; 6_9u; 6_10u; 6_11u; 6_12u; airgap; update_7"
	alias "update_7" "7_0u; 7_1u; 7_2u; 7_3u; 7_4u; 7_5u; 7_6u; 7_7u; 7_8u; 7_9u; 7_10u; 7_11u; 7_12u; airgap; update_8"
	alias "update_8" "8_0u; 8_1u; 8_2u; 8_3u; 8_4u; 8_5u; 8_6u; 8_7u; 8_8u; 8_9u; 8_10u; 8_11u; 8_12u; airgap; update_9"
	alias "update_9" "9_0u; 9_1u; 9_2u; 9_3u; 9_4u; 9_5u; 9_6u; 9_7u; 9_8u; 9_9u; 9_10u; 9_11u; 9_12u; airgap; update_10"
	alias "update_10" "10_0u; 10_1u; 10_2u; 10_3u; 10_4u; 10_5u; 10_6u; 10_7u; 10_8u; 10_9u; 10_10u; 10_11u; 10_12u; airgap; update_11"
	alias "update_11" "11_0u; 11_1u; 11_2u; 11_3u; 11_4u; 11_5u; 11_6u; 11_7u; 11_8u; 11_9u; 11_10u; 11_11u; 11_12u; airgap; update_12"
	alias "update_12" "12_0u; 12_1u; 12_2u; 12_3u; 12_4u; 12_5u; 12_6u; 12_7u; 12_8u; 12_9u; 12_10u; 12_11u; 12_12u; airgap"

//Outputs each line
	alias "outputAll" "echo |0|1|2|3|4|5|6|7|8|9|A|B|C|; out_0"

	alias "out_0" "alias p_0 0_0; alias p_1 0_1; alias p_2 0_2; alias p_3 0_3; alias p_4 0_4; alias p_5 0_5; alias p_6 0_6; alias p_7 0_7; alias p_8 0_8; alias p_9 0_9; alias p_10 0_10; alias p_11 0_11; alias p_12 0_12; lo_; airgap; out_1"
	alias "out_1" "alias p_0 1_0; alias p_1 1_1; alias p_2 1_2; alias p_3 1_3; alias p_4 1_4; alias p_5 1_5; alias p_6 1_6; alias p_7 1_7; alias p_8 1_8; alias p_9 1_9; alias p_10 1_10; alias p_11 1_11; alias p_12 1_12; lo_; airgap; out_2"
	alias "out_2" "alias p_0 2_0; alias p_1 2_1; alias p_2 2_2; alias p_3 2_3; alias p_4 2_4; alias p_5 2_5; alias p_6 2_6; alias p_7 2_7; alias p_8 2_8; alias p_9 2_9; alias p_10 2_10; alias p_11 2_11; alias p_12 2_12; lo_; airgap; out_3"
	alias "out_3" "alias p_0 3_0; alias p_1 3_1; alias p_2 3_2; alias p_3 3_3; alias p_4 3_4; alias p_5 3_5; alias p_6 3_6; alias p_7 3_7; alias p_8 3_8; alias p_9 3_9; alias p_10 3_10; alias p_11 3_11; alias p_12 3_12; lo_; airgap; out_4"
	alias "out_4" "alias p_0 4_0; alias p_1 4_1; alias p_2 4_2; alias p_3 4_3; alias p_4 4_4; alias p_5 4_5; alias p_6 4_6; alias p_7 4_7; alias p_8 4_8; alias p_9 4_9; alias p_10 4_10; alias p_11 4_11; alias p_12 4_12; lo_; airgap; out_5"
	alias "out_5" "alias p_0 5_0; alias p_1 5_1; alias p_2 5_2; alias p_3 5_3; alias p_4 5_4; alias p_5 5_5; alias p_6 5_6; alias p_7 5_7; alias p_8 5_8; alias p_9 5_9; alias p_10 5_10; alias p_11 5_11; alias p_12 5_12; lo_; airgap; out_6"
	alias "out_6" "alias p_0 6_0; alias p_1 6_1; alias p_2 6_2; alias p_3 6_3; alias p_4 6_4; alias p_5 6_5; alias p_6 6_6; alias p_7 6_7; alias p_8 6_8; alias p_9 6_9; alias p_10 6_10; alias p_11 6_11; alias p_12 6_12; lo_; airgap; out_7"
	alias "out_7" "alias p_0 7_0; alias p_1 7_1; alias p_2 7_2; alias p_3 7_3; alias p_4 7_4; alias p_5 7_5; alias p_6 7_6; alias p_7 7_7; alias p_8 7_8; alias p_9 7_9; alias p_10 7_10; alias p_11 7_11; alias p_12 7_12; lo_; airgap; out_8"
	alias "out_8" "alias p_0 8_0; alias p_1 8_1; alias p_2 8_2; alias p_3 8_3; alias p_4 8_4; alias p_5 8_5; alias p_6 8_6; alias p_7 8_7; alias p_8 8_8; alias p_9 8_9; alias p_10 8_10; alias p_11 8_11; alias p_12 8_12; lo_; airgap; out_9"
	alias "out_9" "alias p_0 9_0; alias p_1 9_1; alias p_2 9_2; alias p_3 9_3; alias p_4 9_4; alias p_5 9_5; alias p_6 9_6; alias p_7 9_7; alias p_8 9_8; alias p_9 9_9; alias p_10 9_10; alias p_11 9_11; alias p_12 9_12; lo_; airgap; out_10"
	alias "out_10" "alias p_0 10_0; alias p_1 10_1; alias p_2 10_2; alias p_3 10_3; alias p_4 10_4; alias p_5 10_5; alias p_6 10_6; alias p_7 10_7; alias p_8 10_8; alias p_9 10_9; alias p_10 10_10; alias p_11 10_11; alias p_12 10_12; lo_; airgap; out_11"
	alias "out_11" "alias p_0 11_0; alias p_1 11_1; alias p_2 11_2; alias p_3 11_3; alias p_4 11_4; alias p_5 11_5; alias p_6 11_6; alias p_7 11_7; alias p_8 11_8; alias p_9 11_9; alias p_10 11_10; alias p_11 11_11; alias p_12 11_12; lo_; airgap; out_12"
	alias "out_12" "alias p_0 12_0; alias p_1 12_1; alias p_2 12_2; alias p_3 12_3; alias p_4 12_4; alias p_5 12_5; alias p_6 12_6; alias p_7 12_7; alias p_8 12_8; alias p_9 12_9; alias p_10 12_10; alias p_11 12_11; alias p_12 12_12; lo_; airgap"

//Stores each cell in p and tests it
	alias "countAll" "count_0"

	alias "count_0" "p>0_0; test_p; p>0_1; test_p; p>0_2; test_p; p>0_3; test_p; p>0_4; test_p; p>0_5; test_p; p>0_6; test_p; p>0_7; test_p; p>0_8; test_p; p>0_9; test_p; p>0_10; test_p; p>0_11; test_p; p>0_12; test_p; airgap; count_1"
	alias "count_1" "p>1_0; test_p; p>1_1; test_p; p>1_2; test_p; p>1_3; test_p; p>1_4; test_p; p>1_5; test_p; p>1_6; test_p; p>1_7; test_p; p>1_8; test_p; p>1_9; test_p; p>1_10; test_p; p>1_11; test_p; p>1_12; test_p; airgap; count_2"
	alias "count_2" "p>2_0; test_p; p>2_1; test_p; p>2_2; test_p; p>2_3; test_p; p>2_4; test_p; p>2_5; test_p; p>2_6; test_p; p>2_7; test_p; p>2_8; test_p; p>2_9; test_p; p>2_10; test_p; p>2_11; test_p; p>2_12; test_p; airgap; count_3"
	alias "count_3" "p>3_0; test_p; p>3_1; test_p; p>3_2; test_p; p>3_3; test_p; p>3_4; test_p; p>3_5; test_p; p>3_6; test_p; p>3_7; test_p; p>3_8; test_p; p>3_9; test_p; p>3_10; test_p; p>3_11; test_p; p>3_12; test_p; airgap; count_4"
	alias "count_4" "p>4_0; test_p; p>4_1; test_p; p>4_2; test_p; p>4_3; test_p; p>4_4; test_p; p>4_5; test_p; p>4_6; test_p; p>4_7; test_p; p>4_8; test_p; p>4_9; test_p; p>4_10; test_p; p>4_11; test_p; p>4_12; test_p; airgap; count_5"
	alias "count_5" "p>5_0; test_p; p>5_1; test_p; p>5_2; test_p; p>5_3; test_p; p>5_4; test_p; p>5_5; test_p; p>5_6; test_p; p>5_7; test_p; p>5_8; test_p; p>5_9; test_p; p>5_10; test_p; p>5_11; test_p; p>5_12; test_p; airgap; count_6"
	alias "count_6" "p>6_0; test_p; p>6_1; test_p; p>6_2; test_p; p>6_3; test_p; p>6_4; test_p; p>6_5; test_p; p>6_6; test_p; p>6_7; test_p; p>6_8; test_p; p>6_9; test_p; p>6_10; test_p; p>6_11; test_p; p>6_12; test_p; airgap; count_7"
	alias "count_7" "p>7_0; test_p; p>7_1; test_p; p>7_2; test_p; p>7_3; test_p; p>7_4; test_p; p>7_5; test_p; p>7_6; test_p; p>7_7; test_p; p>7_8; test_p; p>7_9; test_p; p>7_10; test_p; p>7_11; test_p; p>7_12; test_p; airgap; count_8"
	alias "count_8" "p>8_0; test_p; p>8_1; test_p; p>8_2; test_p; p>8_3; test_p; p>8_4; test_p; p>8_5; test_p; p>8_6; test_p; p>8_7; test_p; p>8_8; test_p; p>8_9; test_p; p>8_10; test_p; p>8_11; test_p; p>8_12; test_p; airgap; count_9"
	alias "count_9" "p>9_0; test_p; p>9_1; test_p; p>9_2; test_p; p>9_3; test_p; p>9_4; test_p; p>9_5; test_p; p>9_6; test_p; p>9_7; test_p; p>9_8; test_p; p>9_9; test_p; p>9_10; test_p; p>9_11; test_p; p>9_12; test_p; airgap; count_10"
	alias "count_10" "p>10_0; test_p; p>10_1; test_p; p>10_2; test_p; p>10_3; test_p; p>10_4; test_p; p>10_5; test_p; p>10_6; test_p; p>10_7; test_p; p>10_8; test_p; p>10_9; test_p; p>10_10; test_p; p>10_11; test_p; p>10_12; test_p; airgap; count_11"
	alias "count_11" "p>11_0; test_p; p>11_1; test_p; p>11_2; test_p; p>11_3; test_p; p>11_4; test_p; p>11_5; test_p; p>11_6; test_p; p>11_7; test_p; p>11_8; test_p; p>11_9; test_p; p>11_10; test_p; p>11_11; test_p; p>11_12; test_p; airgap; count_12"
	alias "count_12" "p>12_0; test_p; p>12_1; test_p; p>12_2; test_p; p>12_3; test_p; p>12_4; test_p; p>12_5; test_p; p>12_6; test_p; p>12_7; test_p; p>12_8; test_p; p>12_9; test_p; p>12_10; test_p; p>12_11; test_p; p>12_12; test_p; airgap"


//Output each line
//Then for each cell: store it in p, then test p
//Then update every cell
//Loop this

sv_allow_wait_command 1
alias "airgap" "wait 1"

alias "nothing" ""

alias "next_gen" "outputAll; countAll; updateAll; echo; echo"

//Sets the ticks between generations. Have noticed a lot of slowdown at 50, haven't gone any lower
alias "gen_delay" "wait 100"

alias "loop_basic" "clear; next_gen; gen_delay; loop"
alias "loop" "nothing"
alias "stop_life" "alias loop nothing; echo; echo; echo === GAME PAUSED ==="
alias "start_life" "alias loop loop_basic; loop"

clear
alias "help_life" "help_life_0; help_life_1; help_life_2"
alias "help_life_0" "echo This is a version of Conway's game of life in the TF2 console. This version is a 13x13 grid that wraps around, due to hardware constraints.; echo Type 'start_life' into the console to start with the current setup."
alias "help_life_1" "echo To change the state of a cell, use the <row>_<col>_t (for alive, or true) or <row>_<col>_f (for dead, or false).; echo Cells are 0-indexed (Base 10, despite the grid) starting in the top-right corner, and a preview of the screen can be seen with 'outputAll'"
alias "help_life_2" "echo The loop can be paused with 'stop_life' and restarted with 'start_life'.; echo The game can also be played 1 generation at a time with the 'next_gen' command. The 'help_life command brings up this message'"

help_life

2_1t
2_2t
2_3t
1_3t
0_2t
echo ""
outputAll
